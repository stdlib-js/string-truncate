{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer' ;\nimport numGraphemeClusters from '@stdlib/string-num-grapheme-clusters' ;\nimport nextGraphemeClusterBreak from '@stdlib/string-next-grapheme-cluster-break' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Truncates a string to a specified length.\n*\n* @param {string} str - input string\n* @param {integer} len - output string length (including ending)\n* @param {string} [ending='...'] - custom ending\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a string\n* @returns {string} truncated string\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 7 );\n* // returns 'beep...'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 5, '>>>' );\n* // returns 'be>>>'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 10 );\n* // returns 'beep boop'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 0 );\n* // returns ''\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 2 );\n* // returns '..'\n*\n* @example\n* var str = '🐺 Wolf Brothers 🐺';\n* var out = truncate( str, 6 );\n* // returns '🐺 W...'\n*/\nfunction truncate( str, len, ending ) {\n\tvar endingLength;\n\tvar fromIndex;\n\tvar nVisual;\n\tvar idx;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0hm3R', str ) );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( '0hm3k', len ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isString( ending ) ) {\n\t\t\tthrow new TypeError( format( '0hmB6', ending ) );\n\t\t}\n\t}\n\tending = ending || '...';\n\tendingLength = numGraphemeClusters( ending );\n\tfromIndex = 0;\n\tif ( len > numGraphemeClusters( str ) ) {\n\t\treturn str;\n\t}\n\tif ( len - endingLength < 0 ) {\n\t\treturn ending.slice( 0, len );\n\t}\n\tnVisual = 0;\n\twhile ( nVisual < len - endingLength ) {\n\t\tidx = nextGraphemeClusterBreak( str, fromIndex );\n\t\tfromIndex = idx;\n\t\tnVisual += 1;\n\t}\n\treturn str.substring( 0, idx ) + ending;\n}\n\n\n// EXPORTS //\n\nexport default truncate;\n"],"names":["truncate","str","len","ending","endingLength","fromIndex","nVisual","idx","isString","TypeError","format","isNonNegativeInteger","arguments","length","numGraphemeClusters","slice","nextGraphemeClusterBreak","substring"],"mappings":";;0fAwEA,SAASA,EAAUC,EAAKC,EAAKC,GAC5B,IAAIC,EACAC,EACAC,EACAC,EACJ,IAAMC,EAAUP,GACf,MAAM,IAAIQ,UAAWC,EAAQ,QAAST,IAEvC,IAAMU,EAAsBT,GAC3B,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvC,GAAKU,UAAUC,OAAS,IACjBL,EAAUL,GACf,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAMxC,GAFAC,EAAeU,EADfX,EAASA,GAAU,OAEnBE,EAAY,EACPH,EAAMY,EAAqBb,GAC/B,OAAOA,EAER,GAAKC,EAAME,EAAe,EACzB,OAAOD,EAAOY,MAAO,EAAGb,GAGzB,IADAI,EAAU,EACFA,EAAUJ,EAAME,GAEvBC,EADAE,EAAMS,EAA0Bf,EAAKI,GAErCC,GAAW,EAEZ,OAAOL,EAAIgB,UAAW,EAAGV,GAAQJ,CAClC"}