{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar numGraphemeClusters = require( '@stdlib/string-num-grapheme-clusters' );\nvar nextGraphemeClusterBreak = require( '@stdlib/string-next-grapheme-cluster-break' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Truncates a string to a specified length.\n*\n* @param {string} str - input string\n* @param {integer} len - output string length (including ending)\n* @param {string} [ending='...'] - custom ending\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a string\n* @returns {string} truncated string\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 7 );\n* // returns 'beep...'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 5, '>>>' );\n* // returns 'be>>>'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 10 );\n* // returns 'beep boop'\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 0 );\n* // returns ''\n*\n* @example\n* var str = 'beep boop';\n* var out = truncate( str, 2 );\n* // returns '..'\n*\n* @example\n* var str = '\uD83D\uDC3A Wolf Brothers \uD83D\uDC3A';\n* var out = truncate( str, 6 );\n* // returns '\uD83D\uDC3A W...'\n*/\nfunction truncate( str, len, ending ) {\n\tvar endingLength;\n\tvar fromIndex;\n\tvar nVisual;\n\tvar idx;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isString( ending ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a string. Value: `%s`.', ending ) );\n\t\t}\n\t}\n\tending = ending || '...';\n\tendingLength = numGraphemeClusters( ending );\n\tfromIndex = 0;\n\tif ( len > numGraphemeClusters( str ) ) {\n\t\treturn str;\n\t}\n\tif ( len - endingLength < 0 ) {\n\t\treturn ending.slice( 0, len );\n\t}\n\tnVisual = 0;\n\twhile ( nVisual < len - endingLength ) {\n\t\tidx = nextGraphemeClusterBreak( str, fromIndex );\n\t\tfromIndex = idx;\n\t\tnVisual += 1;\n\t}\n\treturn str.substring( 0, idx ) + ending;\n}\n\n\n// EXPORTS //\n\nmodule.exports = truncate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Truncate a string to a specified length.\n*\n* @module @stdlib/string-truncate\n*\n* @example\n* var truncate = require( '@stdlib/string-truncate' );\n*\n* var out = truncate( 'beep boop', 7 );\n* // returns 'beep...'\n*\n* out = truncate( 'beep boop', 7, '|' );\n* // returns 'beep b|'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAuB,QAAS,uCAAwC,EAAE,YAC1EC,EAAsB,QAAS,sCAAuC,EACtEC,EAA2B,QAAS,4CAA6C,EACjFC,EAAS,QAAS,uBAAwB,EA8C9C,SAASC,EAAUC,EAAKC,EAAKC,EAAS,CACrC,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAK,CAACZ,EAAUM,CAAI,EACnB,MAAM,IAAI,UAAWF,EAAQ,kEAAmEE,CAAI,CAAE,EAEvG,GAAK,CAACL,EAAsBM,CAAI,EAC/B,MAAM,IAAI,UAAWH,EAAQ,gFAAiFG,CAAI,CAAE,EAErH,GAAK,UAAU,OAAS,GAClB,CAACP,EAAUQ,CAAO,EACtB,MAAM,IAAI,UAAWJ,EAAQ,kEAAmEI,CAAO,CAAE,EAM3G,GAHAA,EAASA,GAAU,MACnBC,EAAeP,EAAqBM,CAAO,EAC3CE,EAAY,EACPH,EAAML,EAAqBI,CAAI,EACnC,OAAOA,EAER,GAAKC,EAAME,EAAe,EACzB,OAAOD,EAAO,MAAO,EAAGD,CAAI,EAG7B,IADAI,EAAU,EACFA,EAAUJ,EAAME,GACvBG,EAAMT,EAA0BG,EAAKI,CAAU,EAC/CA,EAAYE,EACZD,GAAW,EAEZ,OAAOL,EAAI,UAAW,EAAGM,CAAI,EAAIJ,CAClC,CAKAT,EAAO,QAAUM,ICxEjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isString", "isNonNegativeInteger", "numGraphemeClusters", "nextGraphemeClusterBreak", "format", "truncate", "str", "len", "ending", "endingLength", "fromIndex", "nVisual", "idx", "main"]
}
